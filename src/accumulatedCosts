    public double getAccumOC(NodeDouble relative, double[][][] and_or, double[]oc, double[][] OUTPUT){
        TreeDouble mytree = Transform2Tree(relative, and_or);
        ArrayList<NodeDouble> children = relative.getChildren();
        double accumAND = 0.0;
        double accumOR = 0.0;
        if(children.isEmpty()){
            relative.setAccumValue(getRelOC(relative.getKey(), oc));
            return relative.getAccumValue();
        }

        Map<Integer,Double> ANDamount = productANDMaps(relative.getChildrenAsMap());
        Map<Integer,int[]> ORamount = SeparateORbyProduct(relative.getChildrenAsMap(), OUTPUT);
        Iterator it = ANDamount.entrySet().iterator();

        while (it.hasNext()){
            Map.Entry<Integer,Double> e = (Map.Entry)it.next();
            accumAND += e.getValue()*getAccumOC(mytree.getNode(e.getKey(),relative), and_or, oc, OUTPUT);
        }
        Iterator it2 = ORamount.entrySet().iterator();
        double temp = 0.0;

        while(it2.hasNext()){
            Map.Entry<Integer,int[]> e = (Map.Entry)it2.next();
            for(int k=0;k<e.getValue().length;k++){
                double value = mytree.getNode(e.getValue()[k], relative).getValue();
                temp += value*getAccumOC(mytree.getNode(e.getValue()[k],relative), and_or, oc, OUTPUT);
            }
            temp = temp/e.getValue().length;
            accumOR += temp;
        }
        double accumValue = getRelOC(relative.getKey(), oc)+accumAND+accumOR;
        relative.setAccumValue(accumValue);
        return relative.getAccumValue();
        }
